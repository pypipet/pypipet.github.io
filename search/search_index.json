{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"introduction \u00b6 PyPipet is an open source project, aiming to integrate data flows in online retailing. It simplifies the data pipeline of ecommerce, for example, adding catalog, update product, manage inventory and orders, etc. It is customized for small business who are selling on wordpress (for example, with woocommerce), shopify, ebay, amazon, Paypal, etc. It extremely handy if the business is selling on multiple platforms. PyPipet is under dev. The latest version 0.0.1a. For source code, visit github repositoty . For documentation, vist docs dependencies \u00b6 installation \u00b6 pip install pypipet or pip3 install pypipet to-do list \u00b6 connect to shopify connect to bigcommerce add email template UI connect to Google Analytics quick start guide \u00b6","title":"PyPipet"},{"location":"#introduction","text":"PyPipet is an open source project, aiming to integrate data flows in online retailing. It simplifies the data pipeline of ecommerce, for example, adding catalog, update product, manage inventory and orders, etc. It is customized for small business who are selling on wordpress (for example, with woocommerce), shopify, ebay, amazon, Paypal, etc. It extremely handy if the business is selling on multiple platforms. PyPipet is under dev. The latest version 0.0.1a. For source code, visit github repositoty . For documentation, vist docs","title":"introduction"},{"location":"#dependencies","text":"","title":"dependencies"},{"location":"#installation","text":"pip install pypipet or pip3 install pypipet","title":"installation"},{"location":"#to-do-list","text":"connect to shopify connect to bigcommerce add email template UI connect to Google Analytics","title":"to-do list"},{"location":"#quick-start-guide","text":"","title":"quick start guide"},{"location":"about/","text":"PyPipet is built for and by its community. All contributions are welcome. Get Early Feedback \u00b6 Feel free to submit your comments and feedbacks. Report bugs \u00b6 Please include the information of your environment setting, testing cases and error messges in logging. Code Contributions \u00b6 When contributing code, please refer to the to-do list. For more information, contact pypipet@gmail.com","title":"Contributions Guide"},{"location":"about/#get-early-feedback","text":"Feel free to submit your comments and feedbacks.","title":"Get Early Feedback"},{"location":"about/#report-bugs","text":"Please include the information of your environment setting, testing cases and error messges in logging.","title":"Report bugs"},{"location":"about/#code-contributions","text":"When contributing code, please refer to the to-do list. For more information, contact pypipet@gmail.com","title":"Code Contributions"},{"location":"dependencies/","text":"Python Dependencies \u00b6 Library Version click 7.0 pyyaml 5.3.1 requests 2.23 sqlalchemy 1.4.27 pandas 1.2.0 pytest 5.2 API Version woocommerce v3.0.0 PayPal v1 Google Content v2.1","title":"dependencies"},{"location":"dependencies/#python-dependencies","text":"Library Version click 7.0 pyyaml 5.3.1 requests 2.23 sqlalchemy 1.4.27 pandas 1.2.0 pytest 5.2 API Version woocommerce v3.0.0 PayPal v1 Google Content v2.1","title":"Python Dependencies"},{"location":"terms/","text":"shop \u00b6 A front shop is the ecommerce site (or platform) where the products are published and sold. The front shop is also called destination where the variation is published and sold. product \u00b6 A product may have multiple variations , and a variation may be published to multiple fronshops, e.g., wordpress, shopify, ebay, etc. supplier \u00b6 fulfillment \u00b6","title":"Definition of Terms"},{"location":"terms/#shop","text":"A front shop is the ecommerce site (or platform) where the products are published and sold. The front shop is also called destination where the variation is published and sold.","title":"shop"},{"location":"terms/#product","text":"A product may have multiple variations , and a variation may be published to multiple fronshops, e.g., wordpress, shopify, ebay, etc.","title":"product"},{"location":"terms/#supplier","text":"","title":"supplier"},{"location":"terms/#fulfillment","text":"","title":"fulfillment"},{"location":"configuration/ecommerce_api/","text":"Woocommerce (Wordpress) \u00b6 site_type : 'wc' url : secure shop url consumer_key : woocomerce api key consumer_secret : woocommerce api secrete version : 'wc/v3' no_of_retries : number of retry if a call fails batch_size : batch size for bulk action (max 50) Note: the proformance of woocommerce-wordpress site highly depends on the server bandwith. For current Ecommerce tier ( wordpress.com ), batch_size =50 is optimal. For smaller instance, it might requires a smaller batch_size to avoid 500 error. If your shop is running in a smaller instance, you could also add a sleep after each call. woocommerce API documentation","title":"Ecommerce API"},{"location":"configuration/ecommerce_api/#woocommerce-wordpress","text":"site_type : 'wc' url : secure shop url consumer_key : woocomerce api key consumer_secret : woocommerce api secrete version : 'wc/v3' no_of_retries : number of retry if a call fails batch_size : batch size for bulk action (max 50) Note: the proformance of woocommerce-wordpress site highly depends on the server bandwith. For current Ecommerce tier ( wordpress.com ), batch_size =50 is optimal. For smaller instance, it might requires a smaller batch_size to avoid 500 error. If your shop is running in a smaller instance, you could also add a sleep after each call. woocommerce API documentation","title":"Woocommerce (Wordpress)"},{"location":"configuration/project_setting/","text":"project configuration setting.yaml \u00b6 default setting name project_name home_dir project folder, default ./ databse_setting path of database config file, default bundle/db_setting.yaml wc_field_mapping path of woocommerce mapping file, default bundle/wc_field_mapping.yaml file_template path of template config file, default bundle/file_template.yaml default_brand default brand name attr_list list of product attributes in product feed (refer to database schema - table variation ) variation_attrs: list of product attributes to define variations (a subset of attr_list ) shop ecommerce platform API settings","title":"project configuration"},{"location":"configuration/project_setting/#project-configuration-settingyaml","text":"default setting name project_name home_dir project folder, default ./ databse_setting path of database config file, default bundle/db_setting.yaml wc_field_mapping path of woocommerce mapping file, default bundle/wc_field_mapping.yaml file_template path of template config file, default bundle/file_template.yaml default_brand default brand name attr_list list of product attributes in product feed (refer to database schema - table variation ) variation_attrs: list of product attributes to define variations (a subset of attr_list ) shop ecommerce platform API settings","title":"project configuration setting.yaml"},{"location":"database/db/","text":"","title":"Db"},{"location":"database/schema/","text":"","title":"Schema"},{"location":"quick_start/create_project/","text":"Create new project \u00b6 mkdir my_project_folder cd my_project_folder pypipet new project_name In current folder . +-- setting.yaml +-- bundle | +-- db_setting.yaml | +-- file_template.yaml | +-- wc_field_mapping.yaml Note: run pypipet in the project folder (where the configuration filsetting.yaml is) Customize setting files \u00b6 setting.yaml project setting bundle/db_setting.yaml database auth and schema bundle/file_template.yaml format of template files bundle/wc_field_mapping.yaml woocommerce field mapping Initialize Project \u00b6 pypipet initialize database will be automatically set up accordiing to bundle/database_setting.yaml see database schema Import Product Catalog \u00b6 option 1: import from file \u00b6 generate template pypipet template frontshop pypipet template supplier pypipet template tax pypipet template product fill the data in files (csv files) load the catalog into database pypipet static add --target supplier -f supplier_template.csv pypipet static add --target supplier -f frontshop_template.csv pypipet static add --target supplier -f tax_template.csv pypipet catalog file --shop [your_shop_name] -f product_template.csv refer your_shop_name to shop name in setting.yaml option 2: import from shop \u00b6 pypipet catalog shop --shop [your_shop_name] update product information \u00b6 show product infomation \u00b6 pypipet product show --shop [your_shop_name] --sku [your_product_sku] edit product information \u00b6 pypipet product edit --shop [your_shop_name] -f product_update_template.csv launch a product to a frontshop \u00b6 pypipet product launch --shop [your_shop_name] --sku [your_product_sku] --price [your_lauch_price] inventory management \u00b6 pypipet inventory edit --shop [your_shop_name] -f inventory_template.csv synchronize order \u00b6 synchronize orders from frontshop to database \u00b6 pypipet order sync --shop home_site show order information \u00b6 pypipet order show --shop [your_shop_name] --id [your_order_id] your_order_id use frontshop order id update order status \u00b6 pypipet order status --shop [your_shop_name] --id [your_order_id] --manual refunded add tracking for shipment \u00b6 add tracking for an order \u00b6 pypipet fulfillment add --shop [your_shop_name] --order-id [your_order_id] --provider [your_service_provider] --tracking [your_tracking_id] your_order_id use frontshop order id your_service_provider e.g., canada_post,usps, ups, fedex, dhl bulk add tracking for orders \u00b6 pypipet fulfillment add --shop [your_shop_name] -f fulfillment_template.csv show tracking information of an order \u00b6 pypipet fulfillment show --shop [your_shop_name] --order-id [your_order_id] import static data to database \u00b6 shops \u00b6 pypipet static add --target front_shop -f frontshop_template.csv supplier \u00b6 pypipet static add --target supplier -f supplier_template.csv tax \u00b6 pypipet static add --target tax -f tax_template.csv category \u00b6 pypipet static add --target category -f category_template.csv","title":"start a project"},{"location":"quick_start/create_project/#create-new-project","text":"mkdir my_project_folder cd my_project_folder pypipet new project_name In current folder . +-- setting.yaml +-- bundle | +-- db_setting.yaml | +-- file_template.yaml | +-- wc_field_mapping.yaml Note: run pypipet in the project folder (where the configuration filsetting.yaml is)","title":"Create new project"},{"location":"quick_start/create_project/#customize-setting-files","text":"setting.yaml project setting bundle/db_setting.yaml database auth and schema bundle/file_template.yaml format of template files bundle/wc_field_mapping.yaml woocommerce field mapping","title":"Customize setting files"},{"location":"quick_start/create_project/#initialize-project","text":"pypipet initialize database will be automatically set up accordiing to bundle/database_setting.yaml see database schema","title":"Initialize Project"},{"location":"quick_start/create_project/#import-product-catalog","text":"","title":"Import Product Catalog"},{"location":"quick_start/create_project/#option-1-import-from-file","text":"generate template pypipet template frontshop pypipet template supplier pypipet template tax pypipet template product fill the data in files (csv files) load the catalog into database pypipet static add --target supplier -f supplier_template.csv pypipet static add --target supplier -f frontshop_template.csv pypipet static add --target supplier -f tax_template.csv pypipet catalog file --shop [your_shop_name] -f product_template.csv refer your_shop_name to shop name in setting.yaml","title":"option 1: import from file"},{"location":"quick_start/create_project/#option-2-import-from-shop","text":"pypipet catalog shop --shop [your_shop_name]","title":"option 2: import from shop"},{"location":"quick_start/create_project/#update-product-information","text":"","title":"update product information"},{"location":"quick_start/create_project/#show-product-infomation","text":"pypipet product show --shop [your_shop_name] --sku [your_product_sku]","title":"show product infomation"},{"location":"quick_start/create_project/#edit-product-information","text":"pypipet product edit --shop [your_shop_name] -f product_update_template.csv","title":"edit product information"},{"location":"quick_start/create_project/#launch-a-product-to-a-frontshop","text":"pypipet product launch --shop [your_shop_name] --sku [your_product_sku] --price [your_lauch_price]","title":"launch a product to a frontshop"},{"location":"quick_start/create_project/#inventory-management","text":"pypipet inventory edit --shop [your_shop_name] -f inventory_template.csv","title":"inventory management"},{"location":"quick_start/create_project/#synchronize-order","text":"","title":"synchronize order"},{"location":"quick_start/create_project/#synchronize-orders-from-frontshop-to-database","text":"pypipet order sync --shop home_site","title":"synchronize orders from frontshop to database"},{"location":"quick_start/create_project/#show-order-information","text":"pypipet order show --shop [your_shop_name] --id [your_order_id] your_order_id use frontshop order id","title":"show order information"},{"location":"quick_start/create_project/#update-order-status","text":"pypipet order status --shop [your_shop_name] --id [your_order_id] --manual refunded","title":"update order status"},{"location":"quick_start/create_project/#add-tracking-for-shipment","text":"","title":"add tracking for shipment"},{"location":"quick_start/create_project/#add-tracking-for-an-order","text":"pypipet fulfillment add --shop [your_shop_name] --order-id [your_order_id] --provider [your_service_provider] --tracking [your_tracking_id] your_order_id use frontshop order id your_service_provider e.g., canada_post,usps, ups, fedex, dhl","title":"add tracking for an order"},{"location":"quick_start/create_project/#bulk-add-tracking-for-orders","text":"pypipet fulfillment add --shop [your_shop_name] -f fulfillment_template.csv","title":"bulk add tracking for orders"},{"location":"quick_start/create_project/#show-tracking-information-of-an-order","text":"pypipet fulfillment show --shop [your_shop_name] --order-id [your_order_id]","title":"show tracking information of an order"},{"location":"quick_start/create_project/#import-static-data-to-database","text":"","title":"import static data to database"},{"location":"quick_start/create_project/#shops","text":"pypipet static add --target front_shop -f frontshop_template.csv","title":"shops"},{"location":"quick_start/create_project/#supplier","text":"pypipet static add --target supplier -f supplier_template.csv","title":"supplier"},{"location":"quick_start/create_project/#tax","text":"pypipet static add --target tax -f tax_template.csv","title":"tax"},{"location":"quick_start/create_project/#category","text":"pypipet static add --target category -f category_template.csv","title":"category"}]}