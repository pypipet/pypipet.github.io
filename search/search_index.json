{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"current version works with Why \u00b6 We started the open-source project, hoping to help small business of Ecommerce to go through this difficult time. CRM/EPM softwares/services are usually designed for big enterprise, and way more expensive than what small business can afford, even though small business might only need the basic features. Most of small business owners do not have the budget and developers to use those softwares or services. We are trying to build a light Ecommerce Dataflow Management solution that modularizes Ecommerce business processes and integrate data from multi channels/platforms, meawhile flexible to customize based on ones own data models and data flows. Introduction \u00b6 PyPipet is an open source project, aiming to integrate data flows of Ecommerce. It is a light solution of Ecommerce Dataflow Management . It provides platform-independent data flows to support Ecommerce functionality. It simplifies data pipelines of data management in ecommerce, for example, adding catalog, updating product, managing inventory and orders, etc. It is specially customized for small business who are selling on wordpress (for example, with woocommerce), shopify, ebay, etc. (more frontshop connected will be added). It extremely handy if the business is selling on multiple platforms (e.g., for dropshipping). It makes it extreamly easy to move your frontshop from one platform to anothor. For source code, visit github repository . For documentation, vist docs Latest pip version: 1.0.0 \u00b6 reporting bugs here Dependencies \u00b6 Installation \u00b6 use pip \u00b6 pip install -r requirements.txt pip install --upgrade pypipet build from source code \u00b6 you need to install peotry to build from the source code poetry build for using Google Content API to connect Google Merchant, please install google_auth_httplib2 and googleapiclient Tested with \u00b6 Shopify Woocommerce with Wordpress.com Postgresql AWS RDS Snowflake Key features \u00b6 cli supported catalog import/export product management for publishing order management fulfillment management inventory management with multiple suppliers Quick start guide \u00b6 Use cases \u00b6","title":"PyPipet"},{"location":"#why","text":"We started the open-source project, hoping to help small business of Ecommerce to go through this difficult time. CRM/EPM softwares/services are usually designed for big enterprise, and way more expensive than what small business can afford, even though small business might only need the basic features. Most of small business owners do not have the budget and developers to use those softwares or services. We are trying to build a light Ecommerce Dataflow Management solution that modularizes Ecommerce business processes and integrate data from multi channels/platforms, meawhile flexible to customize based on ones own data models and data flows.","title":"Why"},{"location":"#introduction","text":"PyPipet is an open source project, aiming to integrate data flows of Ecommerce. It is a light solution of Ecommerce Dataflow Management . It provides platform-independent data flows to support Ecommerce functionality. It simplifies data pipelines of data management in ecommerce, for example, adding catalog, updating product, managing inventory and orders, etc. It is specially customized for small business who are selling on wordpress (for example, with woocommerce), shopify, ebay, etc. (more frontshop connected will be added). It extremely handy if the business is selling on multiple platforms (e.g., for dropshipping). It makes it extreamly easy to move your frontshop from one platform to anothor. For source code, visit github repository . For documentation, vist docs","title":"Introduction"},{"location":"#latest-pip-version-100","text":"reporting bugs here","title":"Latest pip version: 1.0.0"},{"location":"#dependencies","text":"","title":"Dependencies"},{"location":"#installation","text":"","title":"Installation"},{"location":"#use-pip","text":"pip install -r requirements.txt pip install --upgrade pypipet","title":"use pip"},{"location":"#build-from-source-code","text":"you need to install peotry to build from the source code poetry build for using Google Content API to connect Google Merchant, please install google_auth_httplib2 and googleapiclient","title":"build from source code"},{"location":"#tested-with","text":"Shopify Woocommerce with Wordpress.com Postgresql AWS RDS Snowflake","title":"Tested with"},{"location":"#key-features","text":"cli supported catalog import/export product management for publishing order management fulfillment management inventory management with multiple suppliers","title":"Key features"},{"location":"#quick-start-guide","text":"","title":"Quick start guide"},{"location":"#use-cases","text":"","title":"Use cases"},{"location":"about/","text":"PyPipet is built for and by its community. All contributions are welcome. Get Early Feedback \u00b6 Feel free to submit your comments and feedbacks. Report bugs \u00b6 Please include the information of your environment setting, testing cases and error messges in logging. Code Contributions \u00b6 When contributing code, please refer to the to-do list. For more information, contact pypipet@gmail.com","title":"Contributions Guide"},{"location":"about/#get-early-feedback","text":"Feel free to submit your comments and feedbacks.","title":"Get Early Feedback"},{"location":"about/#report-bugs","text":"Please include the information of your environment setting, testing cases and error messges in logging.","title":"Report bugs"},{"location":"about/#code-contributions","text":"When contributing code, please refer to the to-do list. For more information, contact pypipet@gmail.com","title":"Code Contributions"},{"location":"dependencies/","text":"Python Dependencies \u00b6 Library Version click ^8.0.3 pyyaml 5.3.1 requests 2.23 sqlalchemy 1.4.27 pandas 1.2.0 Jinja2 3.0.3 oauth2client 4.1.3 oauthlib 3.1.0 pandas 1.3.4 passlib 1.7.2 SQLAlchemy 1.4.28 SQLAlchemy-JSONField 1.0.0 sqlalchemy-migrate 0.13.0 sqlalchemy-redshift 0.8.1 SQLAlchemy-Utils 0.37.8 pyactiveresource 2.2.2 ShopifyAPI 10.0.0 API Version \u00b6 API Version woocommerce v3.0.0 Shopify REST API 2020-01 PayPal v1 Google Content v2. Testing \u00b6 Testing Version pytest 5.2 Build \u00b6 Build Version poetry 1.1.11","title":"Dependencies"},{"location":"dependencies/#python-dependencies","text":"Library Version click ^8.0.3 pyyaml 5.3.1 requests 2.23 sqlalchemy 1.4.27 pandas 1.2.0 Jinja2 3.0.3 oauth2client 4.1.3 oauthlib 3.1.0 pandas 1.3.4 passlib 1.7.2 SQLAlchemy 1.4.28 SQLAlchemy-JSONField 1.0.0 sqlalchemy-migrate 0.13.0 sqlalchemy-redshift 0.8.1 SQLAlchemy-Utils 0.37.8 pyactiveresource 2.2.2 ShopifyAPI 10.0.0","title":"Python Dependencies"},{"location":"dependencies/#api-version","text":"API Version woocommerce v3.0.0 Shopify REST API 2020-01 PayPal v1 Google Content v2.","title":"API Version"},{"location":"dependencies/#testing","text":"Testing Version pytest 5.2","title":"Testing"},{"location":"dependencies/#build","text":"Build Version poetry 1.1.11","title":"Build"},{"location":"concept/concept/","text":"Architecture \u00b6 modularized data flow customized data model platform independent Modularized Data Flow with ETL pipelines \u00b6 Pypipet packs ecommerce business flow into independant modules that interacted with each other, e.g., catalog management, storefront publishing, order management, fulfillment update, etc. Those modules are connected with ETL data pipelines , where data (e.g., from frontshop) are Extracted , Transformed and Loaded into data models. More modules can be added based on one's own business flows. Customized Data Model \u00b6 Data models of Pypipet are defined with yaml files. Those configurations can be edited to define database schema and data tranformation mapping. examples of project configuration \u00b6 example1: online pharmacy example2: home and garden store Platform Independent \u00b6 Pypipet is built without depending on certain types of ecommerce platforms. There are many ecommerce platforms to facilitate the retailing, e.g., Shopify, Woocommer, Bigcommerce, etc. They all have different data models and API data structures. Pypipet takes care of the data extraction and transformation when pulling or pushing data from/to those platforms through their APIs.","title":"Architecture"},{"location":"concept/concept/#architecture","text":"modularized data flow customized data model platform independent","title":"Architecture"},{"location":"concept/concept/#modularized-data-flow-with-etl-pipelines","text":"Pypipet packs ecommerce business flow into independant modules that interacted with each other, e.g., catalog management, storefront publishing, order management, fulfillment update, etc. Those modules are connected with ETL data pipelines , where data (e.g., from frontshop) are Extracted , Transformed and Loaded into data models. More modules can be added based on one's own business flows.","title":"Modularized Data Flow with ETL pipelines"},{"location":"concept/concept/#customized-data-model","text":"Data models of Pypipet are defined with yaml files. Those configurations can be edited to define database schema and data tranformation mapping.","title":"Customized Data Model"},{"location":"concept/concept/#examples-of-project-configuration","text":"example1: online pharmacy example2: home and garden store","title":"examples of project configuration"},{"location":"concept/concept/#platform-independent","text":"Pypipet is built without depending on certain types of ecommerce platforms. There are many ecommerce platforms to facilitate the retailing, e.g., Shopify, Woocommer, Bigcommerce, etc. They all have different data models and API data structures. Pypipet takes care of the data extraction and transformation when pulling or pushing data from/to those platforms through their APIs.","title":"Platform Independent"},{"location":"configuration/ecommerce_api/","text":"Examples of configuration Woocommerce (Wordpress) \u00b6 For publishing products with Woocommerce on Wordpress platform, you need configure the Woocommerce API ( woocommerce->settings->advanced->REST API ). Make sure you have the both read and write permission. configuration in setting.yaml : \u00b6 site_type : 'wc' url : secure shop url consumer_key : woocomerce api key consumer_secret : woocommerce api secrete version : 'wc/v3' no_of_retries : number of retry if a call fails batch_size : batch size for bulk action (max 50) Notes about Woocommerce API The proformance of woocommerce-wordpress site highly depends on the server bandwith. The call ends up with Error 502 Bad Gateway . For current Ecommerce tier ( wordpress.com ), batch_size = 50 is optimal. For smaller instance, it might requires a smaller batch_size to avoid 500 or 502 error. POST calls take way longer than GET calls. When publishing products on frontshop, the response time depends on the number amd the size of images. The image link error could cause errors when publishing (logs show under debug flag) For better performance, plans on Wordpress.com are recommendated. If your shop is running in a very smaller instance, you could increase the timeout limit ( php.ini ), or add a sleep after each call. woocommerce API documentation Shopify \u00b6 For publishing products at Shopify , you need configure the Shopify REST API and authorize the permissions. It can be done with private app or third-party app configuration in setting.yaml : \u00b6 site_type : shopify API_KEY : API Key after create new application in Partner Dashbord API_SECRET : API Secret after create new application private_app_password : App password of Private App shop_url : your shopify shop domain api_version : 2022-01 #API version Shopify authentication \u00b6 private app : here is the tutorial: How to Make Shopify Private App to set up private app at Shopify store. You need the App password to authenticate the access. you need select the permission for managing collections, products, orders, customers and fulfillments. third-party app : First, create a new application in the Partners Dashboard , and retrieve your API Key and API Secret Key. Second, you need an access token to authenticate with you shop using OAuth. How to get Access Token Third, you need to define the scopes that enable the permission. scopes = [ 'read_products' , 'read_orders' , 'read_customers' , 'read_fulfillments' , 'read_inventory' , 'read_price_rules' , 'write_products' , 'write_orders' , 'write_customers' , 'write_fulfillments' , 'write_inventory' , 'write_price_rules' ] # get auth url newSession = shopify . Session ( shop_url , api_version ) import binascii , os state = binascii . b2a_hex ( os . urandom ( 15 )) . decode ( \"utf-8\" ) auth_url = newSession . create_permission_url ( scopes , redirect_uri , state ) Shopify REST API documentation See Tutorrials: Shopify Auth","title":"Ecommerce API"},{"location":"configuration/ecommerce_api/#woocommerce-wordpress","text":"For publishing products with Woocommerce on Wordpress platform, you need configure the Woocommerce API ( woocommerce->settings->advanced->REST API ). Make sure you have the both read and write permission.","title":"Woocommerce (Wordpress)"},{"location":"configuration/ecommerce_api/#configuration-in-settingyaml","text":"site_type : 'wc' url : secure shop url consumer_key : woocomerce api key consumer_secret : woocommerce api secrete version : 'wc/v3' no_of_retries : number of retry if a call fails batch_size : batch size for bulk action (max 50) Notes about Woocommerce API The proformance of woocommerce-wordpress site highly depends on the server bandwith. The call ends up with Error 502 Bad Gateway . For current Ecommerce tier ( wordpress.com ), batch_size = 50 is optimal. For smaller instance, it might requires a smaller batch_size to avoid 500 or 502 error. POST calls take way longer than GET calls. When publishing products on frontshop, the response time depends on the number amd the size of images. The image link error could cause errors when publishing (logs show under debug flag) For better performance, plans on Wordpress.com are recommendated. If your shop is running in a very smaller instance, you could increase the timeout limit ( php.ini ), or add a sleep after each call. woocommerce API documentation","title":"configuration in setting.yaml:"},{"location":"configuration/ecommerce_api/#shopify","text":"For publishing products at Shopify , you need configure the Shopify REST API and authorize the permissions. It can be done with private app or third-party app","title":"Shopify"},{"location":"configuration/ecommerce_api/#configuration-in-settingyaml_1","text":"site_type : shopify API_KEY : API Key after create new application in Partner Dashbord API_SECRET : API Secret after create new application private_app_password : App password of Private App shop_url : your shopify shop domain api_version : 2022-01 #API version","title":"configuration in setting.yaml:"},{"location":"configuration/ecommerce_api/#shopify-authentication","text":"private app : here is the tutorial: How to Make Shopify Private App to set up private app at Shopify store. You need the App password to authenticate the access. you need select the permission for managing collections, products, orders, customers and fulfillments. third-party app : First, create a new application in the Partners Dashboard , and retrieve your API Key and API Secret Key. Second, you need an access token to authenticate with you shop using OAuth. How to get Access Token Third, you need to define the scopes that enable the permission. scopes = [ 'read_products' , 'read_orders' , 'read_customers' , 'read_fulfillments' , 'read_inventory' , 'read_price_rules' , 'write_products' , 'write_orders' , 'write_customers' , 'write_fulfillments' , 'write_inventory' , 'write_price_rules' ] # get auth url newSession = shopify . Session ( shop_url , api_version ) import binascii , os state = binascii . b2a_hex ( os . urandom ( 15 )) . decode ( \"utf-8\" ) auth_url = newSession . create_permission_url ( scopes , redirect_uri , state ) Shopify REST API documentation See Tutorrials: Shopify Auth","title":"Shopify authentication"},{"location":"configuration/project_setting/","text":"project configuration setting.yaml \u00b6 default setting name project_name home_dir project folder, default ./ databse_setting path of database config file, default bundle/db_setting.yaml wc_field_mapping path of woocommerce mapping file, default bundle/wc_field_mapping.yaml (case sensitive) spf_field_mapping path of Shopify REST API mapping file, default bundle/spf_field_mapping.yaml (case sensitive) file_template path of template config file, default bundle/file_template.yaml default_brand default brand name attr_list list of product attributes in product feed (refer to database schema - table variation ) variation_attrs : list of product attributes to define variations (a subset of attr_list ). Shopify allows three attributes (as option ) max. shops ecommerce platform API settings project_setting : name : pypipet project home_dir : './' databse_setting : bundle/db_setting.yaml wc_field_mapping : bundle/wc_field_mapping.yaml spf_field_mapping : bundle/spf_field_mapping.yaml file_template : bundle/file_template.yaml default_brand : 'NA' attr_list : [ 'brand' , 'upc' , 'size' , 'color' ] variation_attrs : [ 'color' ] shops : home_site : site_type : wc url : 'https://xxx.com' consumer_key : ck_45b6 consumer_secret : cs_fb1671aaf version : 'wc/v3' no_of_retries : 3 batch_size : 50 test_site : site_type : wc url : 'https://xxx.com' consumer_key : ck_45b6 consumer_secret : cs_fb1671aaf version : 'wc/v3' no_of_retries : 3 batch_size : 50 spf_site : site_type : shopify API_KEY : c341c45635623463 API_SECRET : shpss_1caer345ersfar14c0 private_app_password : shppa_3fddgf3453efasdwe5dgasetadfae access_token : iiuweuty94t7 # non-private app shop_url : test_shop.myshopify.com api_version : 2022-01","title":"Project configuration"},{"location":"configuration/project_setting/#project-configuration-settingyaml","text":"default setting name project_name home_dir project folder, default ./ databse_setting path of database config file, default bundle/db_setting.yaml wc_field_mapping path of woocommerce mapping file, default bundle/wc_field_mapping.yaml (case sensitive) spf_field_mapping path of Shopify REST API mapping file, default bundle/spf_field_mapping.yaml (case sensitive) file_template path of template config file, default bundle/file_template.yaml default_brand default brand name attr_list list of product attributes in product feed (refer to database schema - table variation ) variation_attrs : list of product attributes to define variations (a subset of attr_list ). Shopify allows three attributes (as option ) max. shops ecommerce platform API settings project_setting : name : pypipet project home_dir : './' databse_setting : bundle/db_setting.yaml wc_field_mapping : bundle/wc_field_mapping.yaml spf_field_mapping : bundle/spf_field_mapping.yaml file_template : bundle/file_template.yaml default_brand : 'NA' attr_list : [ 'brand' , 'upc' , 'size' , 'color' ] variation_attrs : [ 'color' ] shops : home_site : site_type : wc url : 'https://xxx.com' consumer_key : ck_45b6 consumer_secret : cs_fb1671aaf version : 'wc/v3' no_of_retries : 3 batch_size : 50 test_site : site_type : wc url : 'https://xxx.com' consumer_key : ck_45b6 consumer_secret : cs_fb1671aaf version : 'wc/v3' no_of_retries : 3 batch_size : 50 spf_site : site_type : shopify API_KEY : c341c45635623463 API_SECRET : shpss_1caer345ersfar14c0 private_app_password : shppa_3fddgf3453efasdwe5dgasetadfae access_token : iiuweuty94t7 # non-private app shop_url : test_shop.myshopify.com api_version : 2022-01","title":"project configuration setting.yaml"},{"location":"quick_start/create_project/","text":"Create new project \u00b6 mkdir my_project_folder cd my_project_folder pypipet new project_name In current folder . +-- setting.yaml +-- bundle | +-- db_setting.yaml | +-- file_template.yaml | +-- wc_field_mapping.yaml +-- spf_field_mapping.yaml Note: run pypipet in the project folder (where the configuration filsetting.yaml is) Customize setting files \u00b6 setting.yaml project setting bundle/db_setting.yaml database auth and schema bundle/file_template.yaml format of template files bundle/wc_field_mapping.yaml woocommerce API field mapping bundle/spf_field_mapping.yaml shopify API field mapping Here are examples of setting files of project configuration. Here are the references to set up shop API. Initialize Project \u00b6 pypipet initialize database tables are automatically set up accordiing to bundle/database_setting.yaml see database schema For terms used in Pypipet, please check Terms . Import Product Catalog \u00b6 PyPipet allows two options to import catalog information into the project, by files or synchronized from online store through store API. option 1: import from file \u00b6 generate template files to input data pypipet template --file frontshop pypipet template --file supplier pypipet template --file tax pypipet template --file product About template files The template are csv files. The format of column names is Tablename.Columnname . For importing catalog only, ignore the columns with names start with destination in product template fill data in the template files (csv files) load the data into database static data pypipet static add --target supplier -f supplier_template.csv pypipet static add --target front_shop -f frontshop_template.csv pypipet static add --target tax -f tax_template.csv product data pypipet catalog file --shop [your_shop_name] -f product_template.csv Refer your_shop_name to shop name (case sensitive) in setting.yaml . shops : wp : #shop name, case sensitive site_type : wc url : 'https://shopurl.ca/' consumer_key : ck_xxx consumer_secret : xxx version : 'wc/v3' no_of_retries : 3 batch_size : 50 option 2: import from shop API \u00b6 pypipet catalog shop --shop [your_shop_name] update product information \u00b6 After importing the catalog, PyPipet allows you to edit product if information need to be updated. You can also edit product information after lauching the variation , or update price (or status) at destination . show product infomation \u00b6 pypipet product show --shop [your_shop_name] --sku [your_product_sku] edit product information \u00b6 pypipet product edit --shop [your_shop_name] -f product_update_template.csv launch a product to a frontshop (publish product) \u00b6 option1: single sku \u00b6 pypipet product launch --shop [your_shop_name] --sku [your_product_sku] --price [your_lauch_price] option2: bulk action by template files \u00b6 You can use the product template file. Two columns are necessary: sku (or variation.sku ) and price ( destination.price ) pypipet product launch --shop [your_shop_name] -f product_template.csv inventory management \u00b6 to update qty in stock (identified with sku ) pypipet inventory edit --shop [your_shop_name] -f inventory_template.csv Order Management \u00b6 synchronize orders from frontshop to database \u00b6 pypipet order sync --shop [your_shop_name] show order information \u00b6 pypipet order show --shop [your_shop_name] --order-id [your_order_id] your_order_id use frontshop order id update order status \u00b6 pypipet order status --shop [your_shop_name] --order-id [your_order_id] --manual refunded Add shipment tracking \u00b6 add tracking info \u00b6 pypipet fulfillment add --shop [your_shop_name] --order-id [your_order_id] --provider [your_service_provider] --tracking [your_tracking_id] your_order_id : order id from store API your_service_provider : e.g., canada_post,usps, ups, fedex, dhl bulk add tracking info \u00b6 pypipet fulfillment add --shop [your_shop_name] -f fulfillment_template.csv show tracking information of an order \u00b6 pypipet fulfillment show --shop [your_shop_name] --order-id [your_order_id] Import static data to database \u00b6 add frontshop \u00b6 pypipet static add --target front_shop -f frontshop_template.csv add supplier \u00b6 pypipet static add --target supplier -f supplier_template.csv add tax type \u00b6 pypipet static add --target tax -f tax_template.csv add category \u00b6 pypipet static add --target category -f category_template.csv Please check References for details of cli","title":"Start a project"},{"location":"quick_start/create_project/#create-new-project","text":"mkdir my_project_folder cd my_project_folder pypipet new project_name In current folder . +-- setting.yaml +-- bundle | +-- db_setting.yaml | +-- file_template.yaml | +-- wc_field_mapping.yaml +-- spf_field_mapping.yaml Note: run pypipet in the project folder (where the configuration filsetting.yaml is)","title":"Create new project"},{"location":"quick_start/create_project/#customize-setting-files","text":"setting.yaml project setting bundle/db_setting.yaml database auth and schema bundle/file_template.yaml format of template files bundle/wc_field_mapping.yaml woocommerce API field mapping bundle/spf_field_mapping.yaml shopify API field mapping Here are examples of setting files of project configuration. Here are the references to set up shop API.","title":"Customize setting files"},{"location":"quick_start/create_project/#initialize-project","text":"pypipet initialize database tables are automatically set up accordiing to bundle/database_setting.yaml see database schema For terms used in Pypipet, please check Terms .","title":"Initialize Project"},{"location":"quick_start/create_project/#import-product-catalog","text":"PyPipet allows two options to import catalog information into the project, by files or synchronized from online store through store API.","title":"Import Product Catalog"},{"location":"quick_start/create_project/#option-1-import-from-file","text":"generate template files to input data pypipet template --file frontshop pypipet template --file supplier pypipet template --file tax pypipet template --file product About template files The template are csv files. The format of column names is Tablename.Columnname . For importing catalog only, ignore the columns with names start with destination in product template fill data in the template files (csv files) load the data into database static data pypipet static add --target supplier -f supplier_template.csv pypipet static add --target front_shop -f frontshop_template.csv pypipet static add --target tax -f tax_template.csv product data pypipet catalog file --shop [your_shop_name] -f product_template.csv Refer your_shop_name to shop name (case sensitive) in setting.yaml . shops : wp : #shop name, case sensitive site_type : wc url : 'https://shopurl.ca/' consumer_key : ck_xxx consumer_secret : xxx version : 'wc/v3' no_of_retries : 3 batch_size : 50","title":"option 1: import from file"},{"location":"quick_start/create_project/#option-2-import-from-shop-api","text":"pypipet catalog shop --shop [your_shop_name]","title":"option 2: import from shop API"},{"location":"quick_start/create_project/#update-product-information","text":"After importing the catalog, PyPipet allows you to edit product if information need to be updated. You can also edit product information after lauching the variation , or update price (or status) at destination .","title":"update product information"},{"location":"quick_start/create_project/#show-product-infomation","text":"pypipet product show --shop [your_shop_name] --sku [your_product_sku]","title":"show product infomation"},{"location":"quick_start/create_project/#edit-product-information","text":"pypipet product edit --shop [your_shop_name] -f product_update_template.csv","title":"edit product information"},{"location":"quick_start/create_project/#launch-a-product-to-a-frontshop-publish-product","text":"","title":"launch a product to a frontshop (publish product)"},{"location":"quick_start/create_project/#option1-single-sku","text":"pypipet product launch --shop [your_shop_name] --sku [your_product_sku] --price [your_lauch_price]","title":"option1: single sku"},{"location":"quick_start/create_project/#option2-bulk-action-by-template-files","text":"You can use the product template file. Two columns are necessary: sku (or variation.sku ) and price ( destination.price ) pypipet product launch --shop [your_shop_name] -f product_template.csv","title":"option2: bulk action by template files"},{"location":"quick_start/create_project/#inventory-management","text":"to update qty in stock (identified with sku ) pypipet inventory edit --shop [your_shop_name] -f inventory_template.csv","title":"inventory management"},{"location":"quick_start/create_project/#order-management","text":"","title":"Order Management"},{"location":"quick_start/create_project/#synchronize-orders-from-frontshop-to-database","text":"pypipet order sync --shop [your_shop_name]","title":"synchronize orders from frontshop to database"},{"location":"quick_start/create_project/#show-order-information","text":"pypipet order show --shop [your_shop_name] --order-id [your_order_id] your_order_id use frontshop order id","title":"show order information"},{"location":"quick_start/create_project/#update-order-status","text":"pypipet order status --shop [your_shop_name] --order-id [your_order_id] --manual refunded","title":"update order status"},{"location":"quick_start/create_project/#add-shipment-tracking","text":"","title":"Add shipment tracking"},{"location":"quick_start/create_project/#add-tracking-info","text":"pypipet fulfillment add --shop [your_shop_name] --order-id [your_order_id] --provider [your_service_provider] --tracking [your_tracking_id] your_order_id : order id from store API your_service_provider : e.g., canada_post,usps, ups, fedex, dhl","title":"add tracking info"},{"location":"quick_start/create_project/#bulk-add-tracking-info","text":"pypipet fulfillment add --shop [your_shop_name] -f fulfillment_template.csv","title":"bulk add tracking info"},{"location":"quick_start/create_project/#show-tracking-information-of-an-order","text":"pypipet fulfillment show --shop [your_shop_name] --order-id [your_order_id]","title":"show tracking information of an order"},{"location":"quick_start/create_project/#import-static-data-to-database","text":"","title":"Import static data to database"},{"location":"quick_start/create_project/#add-frontshop","text":"pypipet static add --target front_shop -f frontshop_template.csv","title":"add frontshop"},{"location":"quick_start/create_project/#add-supplier","text":"pypipet static add --target supplier -f supplier_template.csv","title":"add supplier"},{"location":"quick_start/create_project/#add-tax-type","text":"pypipet static add --target tax -f tax_template.csv","title":"add tax type"},{"location":"quick_start/create_project/#add-category","text":"pypipet static add --target category -f category_template.csv Please check References for details of cli","title":"add category"},{"location":"references/cli/","text":"version 1.0.0 pypipet \u00b6 Synopsis \u00b6 pypipet [OPTIONS] COMMAND [ARGS]... Commands: \u00b6 new initialize catalog product inventory order fulfillment template static Global Options \u00b6 --log-level [debug|info|warning|error|critical] `debug` as default --log-path TEXT current path as default -v, --verbose -conf, --config TEXT `./settings.yaml` in current dir as default --help Show help message. Command References \u00b6 Create New Proejct \u00b6 Synopsis: \u00b6 pypipet new [OPTIONS] PROJECT_NAME Descritpion: \u00b6 Create new project and generate proejct directory in current path. Options \u00b6 see Global Options Examples \u00b6 pypipet new my_project Initialize Proejct \u00b6 Synopsis: \u00b6 pypipet initialize [OPTIONS] Descritpion \u00b6 Intialize project and create database schema Options \u00b6 see Global Options Examples \u00b6 pypipet initialize Catalog \u00b6 Synopsis: \u00b6 pypipet catalog {shop|file} [OPTIONS] Descritpion \u00b6 Import product catalog. pypipet allows two options of source type: shop or file . The feed file path (flag -f ) is needed if import by file . Define the template files in bundle/file_template.yaml . Column names start with product. and variation. are mandatory to create catalog (without publishing to store front). sku is the unique identifier of variations. Note that frontshop name is case sensitive. Options \u00b6 --shop TEXT frontshop name (in `setting.yaml` -> `shop`) -f, --filename TEXT product feed csv --currency TEXT USD as default Examples \u00b6 # by file pypipet catalog file --shop abcshop -f product_tempalte.csv # by store API pypipet catalog --shop abcshop Product \u00b6 Synopsis: \u00b6 pypipet product {launch|deactivate|activate|edit|show} [OPTIONS] Descritpion \u00b6 Publish or edit products. pypipet support product actions: launch , deactivate , activate , edit , show . sku and price are mandatory when publish to frontshop. If launch by import a feed file, two columns are mandatory: sku (or variation.sku ) and price ( destination.price ). If flag skip-shop is used, pypipet does not push update to frontshop. Options \u00b6 --shop TEXT frontshop name (in `setting.yaml` -> `shop`) --sku TEXT if multiple sku provided, seperate with comma -f, --filename TEXT edit product attributes with feed files --price TEXT price when lauching a product to frontshop --currency TEXT USD as default --include-stock update stock when lauching a product to frontshop (shopify only) --skip-shop skip updating frontshop for actions. Examples \u00b6 # show info pypipet product show --shop abcshop --sku 223344 # edit variation attributes pypipet product edit --shop abcshop -f feed.csv # publish a sku to store front pypipet product launch --shop abcshop --sku 223344 --price 23.99 # publish a list of skus (with price) to store front pypipet product launch --shop abcshop -f feed.csv # deactivate a variation at frontshop pypipet product deactivate --shop abcshop --sku 223344 Inventory \u00b6 Synopsis: \u00b6 pypipet product pypipet inventory {show|edit} [OPTIONS] Descritpion \u00b6 update inventory in stock. pypipet support inventory actions: show and edit . sku and supplier_id are mandatory to update inventory. If flag skip-shop is used, pypipet does not push update to frontshop. Options \u00b6 --shop TEXT frontshop name (in `setting.yaml` -> `shop`) --sku TEXT if multiple sku provided, seperate with comma -f, --filename TEXT update inventory with file --batch INTEGER batch size to update inventory in database (default 100) --skip-shop skip updating frontshop for actions. Examples \u00b6 # update inventory by file pypipet inventory edit --shop abcshop -f inventory_template.csv # show inventory by sku pypipet inventory show --sku 223344 Order \u00b6 Synopsis: \u00b6 pypipet order {sync|status|show} [OPTIONS] Descritpion \u00b6 pull and edit order info. pypipet support order actions: sync , status , show . If update order status manually, the order status (flag manual ) has to be included. pypipet accepts values of order status: refunded , completed , processing , shipped , ready-to-ship , cancelled . if action status does not have flag manual , pypipet pulls status from store API and pushes to database to update. Order-id is the id from shop API (see woocommerce order id , shopify order_id ). Options \u00b6 --shop TEXT frontshop name (in `setting.yaml` -> `shop`) --order-id TEXT order id from shop API --manual manual input for status -f, --filename TEXT update order status with file Examples \u00b6 # pull order from shop API pypipet order sync --shop abcshop # show order info pypipet order show --shop abcshop --order-id 60280 # mark order as completed pypipet order status --shop abcshop --order-id 60280 --manual completed Fulfillment \u00b6 Synopsis: \u00b6 pypipet fulfillment {add|edit|show} [OPTIONS] Descritpion \u00b6 update order shipment info. pypipet support fulfillment actions: add , edit , show . Order fulfillment info must have order-id from shop API (see woocommerce order id , shopify order_id ), tracking code (flag tracking ) and service provider (flag provider , currenlty support { canada_post | usps | ups | fedex | dhl }). Options \u00b6 --shop TEXT frontshop name (in `setting.yaml` -> `shop`) --tracking TEXT tracking code --provider shipping service provider --order-id TEXT order id from shop API -f, --filename TEXT edit tracking info by files --message send tracking info to customers. Examples \u00b6 # add tracking info pypipet fulfillment add --shop abcshop --order-id 60280 --tracking 998884844444 --provider usps # add tracking info and notify the customer pypipet fulfillment add --shop abcshop --order-id 60280 --tracking 998884844444 --provider usps --message # bulk add by files and notify customers pypipet fulfillment add --shop abcshop -f tracking_feed.csv --message # edit tracking info pypipet fulfillment edit --shop abcshop --order-id 60280 --tracking 423090000 --provider ups Template \u00b6 Synopsis: \u00b6 pypipet template [OPTIONS] Descritpion \u00b6 generate template files in csv format. pypipet support template file types (flag file ): product , product_update , order , customer , inventory , fulfillment , supplier , front_shop , tax and category . The template are csv files. The format of column names is Tablename.Columnname.Template file format need to be defined in bundle/file_template.yaml (see example ). Options \u00b6 --file template file type Examples \u00b6 # generate template to input frontshop pypipet template --file frontshop # generate template to input supplier info pypipet template --file supplier # generate template to input tax type pypipet template --file tax # generate template to input product info pypipet template --file product Static Data \u00b6 Synopsis: \u00b6 pypipet static {add|edit|show} [OPTIONS] Descritpion \u00b6 update static data. pypipet support actions: add , edit and show . Static data types (flag target ) include supplier , front_shop , tax , category . Options \u00b6 --target static data type -f, --filename TEXT add/edit with feed files Examples \u00b6 # add supplier pypipet static add --target supplier -f supplier_template.csv # add frontshop pypipet static add --target front_shop -f frontshop_template.csv # show tax types pypipet static show --target tax","title":"CLI"},{"location":"references/cli/#pypipet","text":"","title":"pypipet"},{"location":"references/cli/#synopsis","text":"pypipet [OPTIONS] COMMAND [ARGS]...","title":"Synopsis"},{"location":"references/cli/#commands","text":"new initialize catalog product inventory order fulfillment template static","title":"Commands:"},{"location":"references/cli/#global-options","text":"--log-level [debug|info|warning|error|critical] `debug` as default --log-path TEXT current path as default -v, --verbose -conf, --config TEXT `./settings.yaml` in current dir as default --help Show help message.","title":"Global Options"},{"location":"references/cli/#command-references","text":"","title":"Command References"},{"location":"references/cli/#create-new-proejct","text":"","title":"Create New Proejct"},{"location":"references/cli/#synopsis_1","text":"pypipet new [OPTIONS] PROJECT_NAME","title":"Synopsis:"},{"location":"references/cli/#descritpion","text":"Create new project and generate proejct directory in current path.","title":"Descritpion:"},{"location":"references/cli/#options","text":"see Global Options","title":"Options"},{"location":"references/cli/#examples","text":"pypipet new my_project","title":"Examples"},{"location":"references/cli/#initialize-proejct","text":"","title":"Initialize Proejct"},{"location":"references/cli/#synopsis_2","text":"pypipet initialize [OPTIONS]","title":"Synopsis:"},{"location":"references/cli/#descritpion_1","text":"Intialize project and create database schema","title":"Descritpion"},{"location":"references/cli/#options_1","text":"see Global Options","title":"Options"},{"location":"references/cli/#examples_1","text":"pypipet initialize","title":"Examples"},{"location":"references/cli/#catalog","text":"","title":"Catalog"},{"location":"references/cli/#synopsis_3","text":"pypipet catalog {shop|file} [OPTIONS]","title":"Synopsis:"},{"location":"references/cli/#descritpion_2","text":"Import product catalog. pypipet allows two options of source type: shop or file . The feed file path (flag -f ) is needed if import by file . Define the template files in bundle/file_template.yaml . Column names start with product. and variation. are mandatory to create catalog (without publishing to store front). sku is the unique identifier of variations. Note that frontshop name is case sensitive.","title":"Descritpion"},{"location":"references/cli/#options_2","text":"--shop TEXT frontshop name (in `setting.yaml` -> `shop`) -f, --filename TEXT product feed csv --currency TEXT USD as default","title":"Options"},{"location":"references/cli/#examples_2","text":"# by file pypipet catalog file --shop abcshop -f product_tempalte.csv # by store API pypipet catalog --shop abcshop","title":"Examples"},{"location":"references/cli/#product","text":"","title":"Product"},{"location":"references/cli/#synopsis_4","text":"pypipet product {launch|deactivate|activate|edit|show} [OPTIONS]","title":"Synopsis:"},{"location":"references/cli/#descritpion_3","text":"Publish or edit products. pypipet support product actions: launch , deactivate , activate , edit , show . sku and price are mandatory when publish to frontshop. If launch by import a feed file, two columns are mandatory: sku (or variation.sku ) and price ( destination.price ). If flag skip-shop is used, pypipet does not push update to frontshop.","title":"Descritpion"},{"location":"references/cli/#options_3","text":"--shop TEXT frontshop name (in `setting.yaml` -> `shop`) --sku TEXT if multiple sku provided, seperate with comma -f, --filename TEXT edit product attributes with feed files --price TEXT price when lauching a product to frontshop --currency TEXT USD as default --include-stock update stock when lauching a product to frontshop (shopify only) --skip-shop skip updating frontshop for actions.","title":"Options"},{"location":"references/cli/#examples_3","text":"# show info pypipet product show --shop abcshop --sku 223344 # edit variation attributes pypipet product edit --shop abcshop -f feed.csv # publish a sku to store front pypipet product launch --shop abcshop --sku 223344 --price 23.99 # publish a list of skus (with price) to store front pypipet product launch --shop abcshop -f feed.csv # deactivate a variation at frontshop pypipet product deactivate --shop abcshop --sku 223344","title":"Examples"},{"location":"references/cli/#inventory","text":"","title":"Inventory"},{"location":"references/cli/#synopsis_5","text":"pypipet product pypipet inventory {show|edit} [OPTIONS]","title":"Synopsis:"},{"location":"references/cli/#descritpion_4","text":"update inventory in stock. pypipet support inventory actions: show and edit . sku and supplier_id are mandatory to update inventory. If flag skip-shop is used, pypipet does not push update to frontshop.","title":"Descritpion"},{"location":"references/cli/#options_4","text":"--shop TEXT frontshop name (in `setting.yaml` -> `shop`) --sku TEXT if multiple sku provided, seperate with comma -f, --filename TEXT update inventory with file --batch INTEGER batch size to update inventory in database (default 100) --skip-shop skip updating frontshop for actions.","title":"Options"},{"location":"references/cli/#examples_4","text":"# update inventory by file pypipet inventory edit --shop abcshop -f inventory_template.csv # show inventory by sku pypipet inventory show --sku 223344","title":"Examples"},{"location":"references/cli/#order","text":"","title":"Order"},{"location":"references/cli/#synopsis_6","text":"pypipet order {sync|status|show} [OPTIONS]","title":"Synopsis:"},{"location":"references/cli/#descritpion_5","text":"pull and edit order info. pypipet support order actions: sync , status , show . If update order status manually, the order status (flag manual ) has to be included. pypipet accepts values of order status: refunded , completed , processing , shipped , ready-to-ship , cancelled . if action status does not have flag manual , pypipet pulls status from store API and pushes to database to update. Order-id is the id from shop API (see woocommerce order id , shopify order_id ).","title":"Descritpion"},{"location":"references/cli/#options_5","text":"--shop TEXT frontshop name (in `setting.yaml` -> `shop`) --order-id TEXT order id from shop API --manual manual input for status -f, --filename TEXT update order status with file","title":"Options"},{"location":"references/cli/#examples_5","text":"# pull order from shop API pypipet order sync --shop abcshop # show order info pypipet order show --shop abcshop --order-id 60280 # mark order as completed pypipet order status --shop abcshop --order-id 60280 --manual completed","title":"Examples"},{"location":"references/cli/#fulfillment","text":"","title":"Fulfillment"},{"location":"references/cli/#synopsis_7","text":"pypipet fulfillment {add|edit|show} [OPTIONS]","title":"Synopsis:"},{"location":"references/cli/#descritpion_6","text":"update order shipment info. pypipet support fulfillment actions: add , edit , show . Order fulfillment info must have order-id from shop API (see woocommerce order id , shopify order_id ), tracking code (flag tracking ) and service provider (flag provider , currenlty support { canada_post | usps | ups | fedex | dhl }).","title":"Descritpion"},{"location":"references/cli/#options_6","text":"--shop TEXT frontshop name (in `setting.yaml` -> `shop`) --tracking TEXT tracking code --provider shipping service provider --order-id TEXT order id from shop API -f, --filename TEXT edit tracking info by files --message send tracking info to customers.","title":"Options"},{"location":"references/cli/#examples_6","text":"# add tracking info pypipet fulfillment add --shop abcshop --order-id 60280 --tracking 998884844444 --provider usps # add tracking info and notify the customer pypipet fulfillment add --shop abcshop --order-id 60280 --tracking 998884844444 --provider usps --message # bulk add by files and notify customers pypipet fulfillment add --shop abcshop -f tracking_feed.csv --message # edit tracking info pypipet fulfillment edit --shop abcshop --order-id 60280 --tracking 423090000 --provider ups","title":"Examples"},{"location":"references/cli/#template","text":"","title":"Template"},{"location":"references/cli/#synopsis_8","text":"pypipet template [OPTIONS]","title":"Synopsis:"},{"location":"references/cli/#descritpion_7","text":"generate template files in csv format. pypipet support template file types (flag file ): product , product_update , order , customer , inventory , fulfillment , supplier , front_shop , tax and category . The template are csv files. The format of column names is Tablename.Columnname.Template file format need to be defined in bundle/file_template.yaml (see example ).","title":"Descritpion"},{"location":"references/cli/#options_7","text":"--file template file type","title":"Options"},{"location":"references/cli/#examples_7","text":"# generate template to input frontshop pypipet template --file frontshop # generate template to input supplier info pypipet template --file supplier # generate template to input tax type pypipet template --file tax # generate template to input product info pypipet template --file product","title":"Examples"},{"location":"references/cli/#static-data","text":"","title":"Static Data"},{"location":"references/cli/#synopsis_9","text":"pypipet static {add|edit|show} [OPTIONS]","title":"Synopsis:"},{"location":"references/cli/#descritpion_8","text":"update static data. pypipet support actions: add , edit and show . Static data types (flag target ) include supplier , front_shop , tax , category .","title":"Descritpion"},{"location":"references/cli/#options_8","text":"--target static data type -f, --filename TEXT add/edit with feed files","title":"Options"},{"location":"references/cli/#examples_8","text":"# add supplier pypipet static add --target supplier -f supplier_template.csv # add frontshop pypipet static add --target front_shop -f frontshop_template.csv # show tax types pypipet static show --target tax","title":"Examples"},{"location":"references/database/","text":"bundle/db_setting.yaml Support Ecommerce Business Flow \u00b6 Pypipet provides a light-weight database schema that is designed and customized to basic Ecommerce functionality, including catalog management, inventory update, product publish, order managment, fulfillment managemaent, etc. The schema is defined with an editable yaml file. You can find the definition of tables and columns here definitions of PyPipet Terms . Customize Schema \u00b6 Moreover, the schema can be customized based on ones own need. You can add tables, or edit columns according to your business senario. For example retailers of different products may have a completely different set of attributes to define a product. Here are examples of setting files for two types of business owners. Some of the tables and their columns are mandatory in Pypiet by default. Pypipet validates the schema when the project is initiated. mandatory tables and columns for validation source code . table_validation = { 'category' : [ 'category' , 'full_path' ], 'product' : [ 'product_name' , 'identifier' ], 'front_shop' : [ 'name' , 'provider' ], 'variation' : [ 'sku' , 'description' , 'product_id' ], 'tax' : [ 'name' , 'country_code' , 'default_rate' ], 'destination' : [ 'destination_product_id' , 'price' , 'currency' , 'is_current_price' , 'sku' , 'front_shop_id' , 'available' ], 'inventory' : [ 'sku' , 'cost' , 'currency' , 'supplier_item_id' , 'supplier_id' ], 'customer' : [ 'first_name' , 'last_name' , 'phone' , 'email' , 'address1' , 'address2' , 'country' , 'state' , 'city' , 'postcode' , 'is_shipping' , 'is_billing' ], 'shop_order' : [ 'destination_order_id' , 'front_shop_id' , 'status' , 'billing_customer_id' , 'shipping_customer_id' , 'payment_type' , 'payment_token' , 'refund' , 'shipping_cost' , 'shipping_tax_id' , 'order_total' , 'order_at' , 'currency' ], 'order_item' : [ 'shop_order_id' , 'destination_id' , 'destination_product_id' , 'tax_id' , 'order_qty' , 'ship_qty' ], 'fulfillment' : [ 'provider' , 'status' , 'dimension' , 'weight' , 'tracking_id' , 'shop_order_id' , 'destination_order_id' ] }","title":"Database schema"},{"location":"references/database/#support-ecommerce-business-flow","text":"Pypipet provides a light-weight database schema that is designed and customized to basic Ecommerce functionality, including catalog management, inventory update, product publish, order managment, fulfillment managemaent, etc. The schema is defined with an editable yaml file. You can find the definition of tables and columns here definitions of PyPipet Terms .","title":"Support Ecommerce Business Flow"},{"location":"references/database/#customize-schema","text":"Moreover, the schema can be customized based on ones own need. You can add tables, or edit columns according to your business senario. For example retailers of different products may have a completely different set of attributes to define a product. Here are examples of setting files for two types of business owners. Some of the tables and their columns are mandatory in Pypiet by default. Pypipet validates the schema when the project is initiated. mandatory tables and columns for validation source code . table_validation = { 'category' : [ 'category' , 'full_path' ], 'product' : [ 'product_name' , 'identifier' ], 'front_shop' : [ 'name' , 'provider' ], 'variation' : [ 'sku' , 'description' , 'product_id' ], 'tax' : [ 'name' , 'country_code' , 'default_rate' ], 'destination' : [ 'destination_product_id' , 'price' , 'currency' , 'is_current_price' , 'sku' , 'front_shop_id' , 'available' ], 'inventory' : [ 'sku' , 'cost' , 'currency' , 'supplier_item_id' , 'supplier_id' ], 'customer' : [ 'first_name' , 'last_name' , 'phone' , 'email' , 'address1' , 'address2' , 'country' , 'state' , 'city' , 'postcode' , 'is_shipping' , 'is_billing' ], 'shop_order' : [ 'destination_order_id' , 'front_shop_id' , 'status' , 'billing_customer_id' , 'shipping_customer_id' , 'payment_type' , 'payment_token' , 'refund' , 'shipping_cost' , 'shipping_tax_id' , 'order_total' , 'order_at' , 'currency' ], 'order_item' : [ 'shop_order_id' , 'destination_id' , 'destination_product_id' , 'tax_id' , 'order_qty' , 'ship_qty' ], 'fulfillment' : [ 'provider' , 'status' , 'dimension' , 'weight' , 'tracking_id' , 'shop_order_id' , 'destination_order_id' ] }","title":"Customize Schema"},{"location":"references/terms/","text":"Product Catalog \u00b6 product \u00b6 A product has product_name , category , brand , identifier (human managed product id if available). It may have one or multiple variations . variation \u00b6 A variation must have a unique sku and a few attributes (e.g., color , size , upc , etc.) A variation may be published to multiple fronshops (with difference prices), e.g., wordpress, shopify, ebay, etc. Notes: Shopify can support max 3 variation attributes (named as options in Shopify) inventory \u00b6 Product inventory is mapped with sku. The same product could be purchased from serveral suppliers. It may be also mapped to supplier_item_id from suppliers' catalog. Shop (Storefront) \u00b6 front shop \u00b6 A front_shop is the ecommerce site (or platform) where the products are published and sold (e.g., a Shopify store). The front_shop is also a destination where the variation is published and sold. destination \u00b6 A variation may be published to multiple fronshops (as destination ). The destination status could be deactivated, for example, if the variation is discontinued. The price could be updated over time at each frontshop . destination_product_id \u00b6 The original Product Id pulled through online store API. destination_parent_id \u00b6 For variations, destination_parent_id points to its parent product with online store API. inventory_item_id (Shopify Only) \u00b6 inventory_item_id is used to update inventory through Shopify API Order \u00b6 destination_order_id \u00b6 destination_order_id is the original Order Id pulled through online store API. order item \u00b6 order item is the products on an order. It is mapped to variation with sku customer \u00b6 customer has flags to indicate if it is for shipping, billing or both. fulfillment \u00b6 Fulfillment infomation includes shipment tracking id and service provider .","title":"Definition of Terms"},{"location":"references/terms/#product-catalog","text":"","title":"Product Catalog"},{"location":"references/terms/#product","text":"A product has product_name , category , brand , identifier (human managed product id if available). It may have one or multiple variations .","title":"product"},{"location":"references/terms/#variation","text":"A variation must have a unique sku and a few attributes (e.g., color , size , upc , etc.) A variation may be published to multiple fronshops (with difference prices), e.g., wordpress, shopify, ebay, etc. Notes: Shopify can support max 3 variation attributes (named as options in Shopify)","title":"variation"},{"location":"references/terms/#inventory","text":"Product inventory is mapped with sku. The same product could be purchased from serveral suppliers. It may be also mapped to supplier_item_id from suppliers' catalog.","title":"inventory"},{"location":"references/terms/#shop-storefront","text":"","title":"Shop (Storefront)"},{"location":"references/terms/#front-shop","text":"A front_shop is the ecommerce site (or platform) where the products are published and sold (e.g., a Shopify store). The front_shop is also a destination where the variation is published and sold.","title":"front shop"},{"location":"references/terms/#destination","text":"A variation may be published to multiple fronshops (as destination ). The destination status could be deactivated, for example, if the variation is discontinued. The price could be updated over time at each frontshop .","title":"destination"},{"location":"references/terms/#destination_product_id","text":"The original Product Id pulled through online store API.","title":"destination_product_id"},{"location":"references/terms/#destination_parent_id","text":"For variations, destination_parent_id points to its parent product with online store API.","title":"destination_parent_id"},{"location":"references/terms/#inventory_item_id-shopify-only","text":"inventory_item_id is used to update inventory through Shopify API","title":"inventory_item_id (Shopify Only)"},{"location":"references/terms/#order","text":"","title":"Order"},{"location":"references/terms/#destination_order_id","text":"destination_order_id is the original Order Id pulled through online store API.","title":"destination_order_id"},{"location":"references/terms/#order-item","text":"order item is the products on an order. It is mapped to variation with sku","title":"order item"},{"location":"references/terms/#customer","text":"customer has flags to indicate if it is for shipping, billing or both.","title":"customer"},{"location":"references/terms/#fulfillment","text":"Fulfillment infomation includes shipment tracking id and service provider .","title":"fulfillment"},{"location":"tutorials/dest_verification/","text":"","title":"Dest verification"},{"location":"tutorials/move_shop/","text":"","title":"Move shop"},{"location":"tutorials/shopify_auth/","text":"Shopify API uses pyactiveresource to communicate with the REST web service, which has to be configured with authentication. pypipet connects with Shopify with two options: private App and partner App. Shopify Documentation authentication with private App authentication with partner App Authentication with Private App \u00b6 Step 1 \u00b6 First create a new application in your store admin. You\u2019ll need the API_KEY and the PASSWORD (also called access token ) in API credentials . Step 2 \u00b6 Configure permission and api version. Step 3 \u00b6 Edit pypipet project setting setting.yaml shop credentials Authentication with Partner App \u00b6 Step 1 \u00b6 First create a new application in the partners admin. You\u2019ll need the API_KEY and SHARED_SECRET . Step 2 \u00b6 Get autherization url scopes = [ 'read_products' , 'read_orders' , 'read_customers' , 'read_fulfillments' , 'read_inventory' , 'read_price_rules' , 'write_products' , 'write_orders' , 'write_customers' , 'write_fulfillments' , 'write_inventory' , 'write_price_rules' ] # get auth url newSession = shopify . Session ( shop_url , api_version ) import binascii , os state = binascii . b2a_hex ( os . urandom ( 15 )) . decode ( \"utf-8\" ) auth_url = newSession . create_permission_url ( scopes , redirect_uri , state ) Step 3 \u00b6 Once authorized, the shop redirects the owner to the return URL of your application with parameters, one of which is code . This is a temporary token that the app can exchange for a permanent access token. To get permanent access token: session = shopify . Session ( shop_url , api_version ) access_token = session . request_token ( parameters ) save the token in pypipet project setting setting.yaml shop credentials","title":"Shopify Auth"},{"location":"tutorials/shopify_auth/#authentication-with-private-app","text":"","title":"Authentication with Private App"},{"location":"tutorials/shopify_auth/#step-1","text":"First create a new application in your store admin. You\u2019ll need the API_KEY and the PASSWORD (also called access token ) in API credentials .","title":"Step 1"},{"location":"tutorials/shopify_auth/#step-2","text":"Configure permission and api version.","title":"Step 2"},{"location":"tutorials/shopify_auth/#step-3","text":"Edit pypipet project setting setting.yaml shop credentials","title":"Step 3"},{"location":"tutorials/shopify_auth/#authentication-with-partner-app","text":"","title":"Authentication with Partner App"},{"location":"tutorials/shopify_auth/#step-1_1","text":"First create a new application in the partners admin. You\u2019ll need the API_KEY and SHARED_SECRET .","title":"Step 1"},{"location":"tutorials/shopify_auth/#step-2_1","text":"Get autherization url scopes = [ 'read_products' , 'read_orders' , 'read_customers' , 'read_fulfillments' , 'read_inventory' , 'read_price_rules' , 'write_products' , 'write_orders' , 'write_customers' , 'write_fulfillments' , 'write_inventory' , 'write_price_rules' ] # get auth url newSession = shopify . Session ( shop_url , api_version ) import binascii , os state = binascii . b2a_hex ( os . urandom ( 15 )) . decode ( \"utf-8\" ) auth_url = newSession . create_permission_url ( scopes , redirect_uri , state )","title":"Step 2"},{"location":"tutorials/shopify_auth/#step-3_1","text":"Once authorized, the shop redirects the owner to the return URL of your application with parameters, one of which is code . This is a temporary token that the app can exchange for a permanent access token. To get permanent access token: session = shopify . Session ( shop_url , api_version ) access_token = session . request_token ( parameters ) save the token in pypipet project setting setting.yaml shop credentials","title":"Step 3"},{"location":"usecases/usecases/","text":"","title":"Use cases"}]}