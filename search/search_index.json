{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"current version works with Why \u00b6 We started the open-source project, hoping to help small business of Ecommerce to go through this difficult time. CRM/EPM softwares/services are usually designed for big enterprise, and way more expensive than what small business can afford, even though small business might only need the basic features. Most of small business owners do not have the budget and developers to use those softwares or services. We are trying to build a light Ecommerce Dataflow Management solution that modularizes Ecommerce business processes and integrate data from multi channels/platforms, meawhile flexible to customize based on ones own data models and data flows. Introduction \u00b6 PyPipet is an open source project, aiming to integrate data flows of Ecommerce. It is a light solution of Ecommerce Dataflow Management . It provides platform-independent data flows to support Ecommerce functionality. It simplifies data pipelines of data management in ecommerce, for example, adding catalog, updating product, managing inventory and orders, etc. It is specially customized for small business who are selling on wordpress (for example, with woocommerce), shopify, ebay, etc. (more frontshop connected will be added). It extremely handy if the business is selling on multiple platforms (e.g., for dropshipping). It makes it extreamly easy to move your frontshop from one platform to anothor. For source code, visit github repository . For documentation, vist docs Latest pip version: 1.0.0 \u00b6 reporting bugs here Dependencies \u00b6 Installation \u00b6 use pip \u00b6 pip install -r requirements.txt pip install --upgrade pypipet build from source code \u00b6 you need to install peotry to build from the source code poetry build for using Google Content API to connect Google Merchant, please install google_auth_httplib2 and googleapiclient Tested with \u00b6 Shopify Woocommerce with Wordpress.com Postgresql AWS RDS Snowflake Key features \u00b6 cli supported catalog import/export product management for publishing order management fulfillment management inventory management with multiple suppliers Quick start guide \u00b6 Use cases \u00b6","title":"PyPipet"},{"location":"#why","text":"We started the open-source project, hoping to help small business of Ecommerce to go through this difficult time. CRM/EPM softwares/services are usually designed for big enterprise, and way more expensive than what small business can afford, even though small business might only need the basic features. Most of small business owners do not have the budget and developers to use those softwares or services. We are trying to build a light Ecommerce Dataflow Management solution that modularizes Ecommerce business processes and integrate data from multi channels/platforms, meawhile flexible to customize based on ones own data models and data flows.","title":"Why"},{"location":"#introduction","text":"PyPipet is an open source project, aiming to integrate data flows of Ecommerce. It is a light solution of Ecommerce Dataflow Management . It provides platform-independent data flows to support Ecommerce functionality. It simplifies data pipelines of data management in ecommerce, for example, adding catalog, updating product, managing inventory and orders, etc. It is specially customized for small business who are selling on wordpress (for example, with woocommerce), shopify, ebay, etc. (more frontshop connected will be added). It extremely handy if the business is selling on multiple platforms (e.g., for dropshipping). It makes it extreamly easy to move your frontshop from one platform to anothor. For source code, visit github repository . For documentation, vist docs","title":"Introduction"},{"location":"#latest-pip-version-100","text":"reporting bugs here","title":"Latest pip version: 1.0.0"},{"location":"#dependencies","text":"","title":"Dependencies"},{"location":"#installation","text":"","title":"Installation"},{"location":"#use-pip","text":"pip install -r requirements.txt pip install --upgrade pypipet","title":"use pip"},{"location":"#build-from-source-code","text":"you need to install peotry to build from the source code poetry build for using Google Content API to connect Google Merchant, please install google_auth_httplib2 and googleapiclient","title":"build from source code"},{"location":"#tested-with","text":"Shopify Woocommerce with Wordpress.com Postgresql AWS RDS Snowflake","title":"Tested with"},{"location":"#key-features","text":"cli supported catalog import/export product management for publishing order management fulfillment management inventory management with multiple suppliers","title":"Key features"},{"location":"#quick-start-guide","text":"","title":"Quick start guide"},{"location":"#use-cases","text":"","title":"Use cases"},{"location":"about/","text":"PyPipet is built for and by its community. All contributions are welcome. Get Early Feedback \u00b6 Feel free to submit your comments and feedbacks. Report bugs \u00b6 Please include the information of your environment setting, testing cases and error messges in logging. Code Contributions \u00b6 When contributing code, please refer to the to-do list. For more information, contact pypipet@gmail.com","title":"Contributions Guide"},{"location":"about/#get-early-feedback","text":"Feel free to submit your comments and feedbacks.","title":"Get Early Feedback"},{"location":"about/#report-bugs","text":"Please include the information of your environment setting, testing cases and error messges in logging.","title":"Report bugs"},{"location":"about/#code-contributions","text":"When contributing code, please refer to the to-do list. For more information, contact pypipet@gmail.com","title":"Code Contributions"},{"location":"dependencies/","text":"Python Dependencies \u00b6 Library Version click ^8.0.3 pyyaml 5.3.1 requests 2.23 sqlalchemy 1.4.27 pandas 1.2.0 Jinja2 3.0.3 oauth2client 4.1.3 oauthlib 3.1.0 pandas 1.3.4 passlib 1.7.2 SQLAlchemy 1.4.28 SQLAlchemy-JSONField 1.0.0 sqlalchemy-migrate 0.13.0 sqlalchemy-redshift 0.8.1 SQLAlchemy-Utils 0.37.8 pyactiveresource 2.2.2 ShopifyAPI 10.0.0 API Version \u00b6 API Version woocommerce v3.0.0 Shopify REST API 2020-01 PayPal v1 Google Content v2. Testing \u00b6 Testing Version pytest 5.2 Build \u00b6 Build Version poetry 1.1.11","title":"Dependencies"},{"location":"dependencies/#python-dependencies","text":"Library Version click ^8.0.3 pyyaml 5.3.1 requests 2.23 sqlalchemy 1.4.27 pandas 1.2.0 Jinja2 3.0.3 oauth2client 4.1.3 oauthlib 3.1.0 pandas 1.3.4 passlib 1.7.2 SQLAlchemy 1.4.28 SQLAlchemy-JSONField 1.0.0 sqlalchemy-migrate 0.13.0 sqlalchemy-redshift 0.8.1 SQLAlchemy-Utils 0.37.8 pyactiveresource 2.2.2 ShopifyAPI 10.0.0","title":"Python Dependencies"},{"location":"dependencies/#api-version","text":"API Version woocommerce v3.0.0 Shopify REST API 2020-01 PayPal v1 Google Content v2.","title":"API Version"},{"location":"dependencies/#testing","text":"Testing Version pytest 5.2","title":"Testing"},{"location":"dependencies/#build","text":"Build Version poetry 1.1.11","title":"Build"},{"location":"terms/","text":"shop \u00b6 A front shop is the ecommerce site (or platform) where the products are published and sold. The front shop is also called destination where the variation is published and sold. product \u00b6 A product may have multiple variations , and a variation may be published to multiple fronshops, e.g., wordpress, shopify, ebay, etc. supplier \u00b6 fulfillment \u00b6","title":"Definition of Terms"},{"location":"terms/#shop","text":"A front shop is the ecommerce site (or platform) where the products are published and sold. The front shop is also called destination where the variation is published and sold.","title":"shop"},{"location":"terms/#product","text":"A product may have multiple variations , and a variation may be published to multiple fronshops, e.g., wordpress, shopify, ebay, etc.","title":"product"},{"location":"terms/#supplier","text":"","title":"supplier"},{"location":"terms/#fulfillment","text":"","title":"fulfillment"},{"location":"concept/concept/","text":"Architecture \u00b6 modularized data flow customized data model platform independent Modularized Data Flow with ETL pipelines \u00b6 Pypipet packs ecommerce business flow into independant modules that interacted with each other, e.g., catalog management, storefront publishing, order management, fulfillment update, etc. Those modules are connected with ETL data pipelines , where data (e.g., from frontshop) are Extracted , Transformed and Loaded into data models. More modules can be added based on one's own business flows. Customized Data Model \u00b6 Data models of Pypipet are defined with yaml files. Those configurations can be edited to define database schema and data tranformation mapping. examples of project configuration \u00b6 example1: online pharmacy example2: home and garden store Platform Independent \u00b6 Pypipet is built without depending on certain types of ecommerce platforms. There are many ecommerce platforms to facilitate the retailing, e.g., Shopify, Woocommer, Bigcommerce, etc. They all have different data models and API data structures. Pypipet takes care of the data extraction and transformation when pulling or pushing data from/to those platforms through their APIs.","title":"Architecture"},{"location":"concept/concept/#architecture","text":"modularized data flow customized data model platform independent","title":"Architecture"},{"location":"concept/concept/#modularized-data-flow-with-etl-pipelines","text":"Pypipet packs ecommerce business flow into independant modules that interacted with each other, e.g., catalog management, storefront publishing, order management, fulfillment update, etc. Those modules are connected with ETL data pipelines , where data (e.g., from frontshop) are Extracted , Transformed and Loaded into data models. More modules can be added based on one's own business flows.","title":"Modularized Data Flow with ETL pipelines"},{"location":"concept/concept/#customized-data-model","text":"Data models of Pypipet are defined with yaml files. Those configurations can be edited to define database schema and data tranformation mapping.","title":"Customized Data Model"},{"location":"concept/concept/#examples-of-project-configuration","text":"example1: online pharmacy example2: home and garden store","title":"examples of project configuration"},{"location":"concept/concept/#platform-independent","text":"Pypipet is built without depending on certain types of ecommerce platforms. There are many ecommerce platforms to facilitate the retailing, e.g., Shopify, Woocommer, Bigcommerce, etc. They all have different data models and API data structures. Pypipet takes care of the data extraction and transformation when pulling or pushing data from/to those platforms through their APIs.","title":"Platform Independent"},{"location":"configuration/ecommerce_api/","text":"Woocommerce (Wordpress) \u00b6 site_type : 'wc' url : secure shop url consumer_key : woocomerce api key consumer_secret : woocommerce api secrete version : 'wc/v3' no_of_retries : number of retry if a call fails batch_size : batch size for bulk action (max 50) Note: the proformance of woocommerce-wordpress site highly depends on the server bandwith. For current Ecommerce tier ( wordpress.com ), batch_size =50 is optimal. For smaller instance, it might requires a smaller batch_size to avoid 500 error. If your shop is running in a smaller instance, you could also add a sleep after each call. woocommerce API documentation","title":"Ecommerce API"},{"location":"configuration/ecommerce_api/#woocommerce-wordpress","text":"site_type : 'wc' url : secure shop url consumer_key : woocomerce api key consumer_secret : woocommerce api secrete version : 'wc/v3' no_of_retries : number of retry if a call fails batch_size : batch size for bulk action (max 50) Note: the proformance of woocommerce-wordpress site highly depends on the server bandwith. For current Ecommerce tier ( wordpress.com ), batch_size =50 is optimal. For smaller instance, it might requires a smaller batch_size to avoid 500 error. If your shop is running in a smaller instance, you could also add a sleep after each call. woocommerce API documentation","title":"Woocommerce (Wordpress)"},{"location":"configuration/project_setting/","text":"project configuration setting.yaml \u00b6 default setting name project_name home_dir project folder, default ./ databse_setting path of database config file, default bundle/db_setting.yaml wc_field_mapping path of woocommerce mapping file, default bundle/wc_field_mapping.yaml file_template path of template config file, default bundle/file_template.yaml default_brand default brand name attr_list list of product attributes in product feed (refer to database schema - table variation ) variation_attrs: list of product attributes to define variations (a subset of attr_list ) shop ecommerce platform API settings","title":"Project configuration"},{"location":"configuration/project_setting/#project-configuration-settingyaml","text":"default setting name project_name home_dir project folder, default ./ databse_setting path of database config file, default bundle/db_setting.yaml wc_field_mapping path of woocommerce mapping file, default bundle/wc_field_mapping.yaml file_template path of template config file, default bundle/file_template.yaml default_brand default brand name attr_list list of product attributes in product feed (refer to database schema - table variation ) variation_attrs: list of product attributes to define variations (a subset of attr_list ) shop ecommerce platform API settings","title":"project configuration setting.yaml"},{"location":"database/db/","text":"","title":"Db"},{"location":"database/schema/","text":"","title":"Schema"},{"location":"quick_start/create_project/","text":"Create new project \u00b6 mkdir my_project_folder cd my_project_folder pypipet new project_name In current folder . +-- setting.yaml +-- bundle | +-- db_setting.yaml | +-- file_template.yaml | +-- wc_field_mapping.yaml +-- spf_field_mapping.yaml Note: run pypipet in the project folder (where the configuration filsetting.yaml is) Customize setting files \u00b6 setting.yaml project setting bundle/db_setting.yaml database auth and schema bundle/file_template.yaml format of template files bundle/wc_field_mapping.yaml woocommerce API field mapping bundle/spf_field_mapping.yaml shopify API field mapping Here are examples of setting files of project configuration Initialize Project \u00b6 pypipet initialize database will be automatically set up accordiing to bundle/database_setting.yaml see database schema Import Product Catalog \u00b6 option 1: import from file \u00b6 generate template pypipet template frontshop pypipet template supplier pypipet template tax pypipet template product fill the data in files (csv files) load the catalog into database pypipet static add --target supplier -f supplier_template.csv pypipet static add --target supplier -f frontshop_template.csv pypipet static add --target supplier -f tax_template.csv pypipet catalog file --shop [your_shop_name] -f product_template.csv refer your_shop_name to shop name in setting.yaml option 2: import from shop \u00b6 pypipet catalog shop --shop [your_shop_name] update product information \u00b6 show product infomation \u00b6 pypipet product show --shop [your_shop_name] --sku [your_product_sku] edit product information \u00b6 pypipet product edit --shop [your_shop_name] -f product_update_template.csv launch a product to a frontshop \u00b6 pypipet product launch --shop [your_shop_name] --sku [your_product_sku] --price [your_lauch_price] inventory management \u00b6 pypipet inventory edit --shop [your_shop_name] -f inventory_template.csv Order Management \u00b6 synchronize orders from frontshop to database \u00b6 pypipet order sync --shop home_site show order information \u00b6 pypipet order show --shop [your_shop_name] --id [your_order_id] your_order_id use frontshop order id update order status \u00b6 pypipet order status --shop [your_shop_name] --id [your_order_id] --manual refunded Add tracking for shipment \u00b6 add tracking for an order \u00b6 pypipet fulfillment add --shop [your_shop_name] --order-id [your_order_id] --provider [your_service_provider] --tracking [your_tracking_id] your_order_id use frontshop order id your_service_provider e.g., canada_post,usps, ups, fedex, dhl bulk add tracking for orders \u00b6 pypipet fulfillment add --shop [your_shop_name] -f fulfillment_template.csv show tracking information of an order \u00b6 pypipet fulfillment show --shop [your_shop_name] --order-id [your_order_id] import static data to database \u00b6 shops \u00b6 pypipet static add --target front_shop -f frontshop_template.csv supplier \u00b6 pypipet static add --target supplier -f supplier_template.csv tax \u00b6 pypipet static add --target tax -f tax_template.csv category \u00b6 pypipet static add --target category -f category_template.csv","title":"Start a project"},{"location":"quick_start/create_project/#create-new-project","text":"mkdir my_project_folder cd my_project_folder pypipet new project_name In current folder . +-- setting.yaml +-- bundle | +-- db_setting.yaml | +-- file_template.yaml | +-- wc_field_mapping.yaml +-- spf_field_mapping.yaml Note: run pypipet in the project folder (where the configuration filsetting.yaml is)","title":"Create new project"},{"location":"quick_start/create_project/#customize-setting-files","text":"setting.yaml project setting bundle/db_setting.yaml database auth and schema bundle/file_template.yaml format of template files bundle/wc_field_mapping.yaml woocommerce API field mapping bundle/spf_field_mapping.yaml shopify API field mapping Here are examples of setting files of project configuration","title":"Customize setting files"},{"location":"quick_start/create_project/#initialize-project","text":"pypipet initialize database will be automatically set up accordiing to bundle/database_setting.yaml see database schema","title":"Initialize Project"},{"location":"quick_start/create_project/#import-product-catalog","text":"","title":"Import Product Catalog"},{"location":"quick_start/create_project/#option-1-import-from-file","text":"generate template pypipet template frontshop pypipet template supplier pypipet template tax pypipet template product fill the data in files (csv files) load the catalog into database pypipet static add --target supplier -f supplier_template.csv pypipet static add --target supplier -f frontshop_template.csv pypipet static add --target supplier -f tax_template.csv pypipet catalog file --shop [your_shop_name] -f product_template.csv refer your_shop_name to shop name in setting.yaml","title":"option 1: import from file"},{"location":"quick_start/create_project/#option-2-import-from-shop","text":"pypipet catalog shop --shop [your_shop_name]","title":"option 2: import from shop"},{"location":"quick_start/create_project/#update-product-information","text":"","title":"update product information"},{"location":"quick_start/create_project/#show-product-infomation","text":"pypipet product show --shop [your_shop_name] --sku [your_product_sku]","title":"show product infomation"},{"location":"quick_start/create_project/#edit-product-information","text":"pypipet product edit --shop [your_shop_name] -f product_update_template.csv","title":"edit product information"},{"location":"quick_start/create_project/#launch-a-product-to-a-frontshop","text":"pypipet product launch --shop [your_shop_name] --sku [your_product_sku] --price [your_lauch_price]","title":"launch a product to a frontshop"},{"location":"quick_start/create_project/#inventory-management","text":"pypipet inventory edit --shop [your_shop_name] -f inventory_template.csv","title":"inventory management"},{"location":"quick_start/create_project/#order-management","text":"","title":"Order Management"},{"location":"quick_start/create_project/#synchronize-orders-from-frontshop-to-database","text":"pypipet order sync --shop home_site","title":"synchronize orders from frontshop to database"},{"location":"quick_start/create_project/#show-order-information","text":"pypipet order show --shop [your_shop_name] --id [your_order_id] your_order_id use frontshop order id","title":"show order information"},{"location":"quick_start/create_project/#update-order-status","text":"pypipet order status --shop [your_shop_name] --id [your_order_id] --manual refunded","title":"update order status"},{"location":"quick_start/create_project/#add-tracking-for-shipment","text":"","title":"Add tracking for shipment"},{"location":"quick_start/create_project/#add-tracking-for-an-order","text":"pypipet fulfillment add --shop [your_shop_name] --order-id [your_order_id] --provider [your_service_provider] --tracking [your_tracking_id] your_order_id use frontshop order id your_service_provider e.g., canada_post,usps, ups, fedex, dhl","title":"add tracking for an order"},{"location":"quick_start/create_project/#bulk-add-tracking-for-orders","text":"pypipet fulfillment add --shop [your_shop_name] -f fulfillment_template.csv","title":"bulk add tracking for orders"},{"location":"quick_start/create_project/#show-tracking-information-of-an-order","text":"pypipet fulfillment show --shop [your_shop_name] --order-id [your_order_id]","title":"show tracking information of an order"},{"location":"quick_start/create_project/#import-static-data-to-database","text":"","title":"import static data to database"},{"location":"quick_start/create_project/#shops","text":"pypipet static add --target front_shop -f frontshop_template.csv","title":"shops"},{"location":"quick_start/create_project/#supplier","text":"pypipet static add --target supplier -f supplier_template.csv","title":"supplier"},{"location":"quick_start/create_project/#tax","text":"pypipet static add --target tax -f tax_template.csv","title":"tax"},{"location":"quick_start/create_project/#category","text":"pypipet static add --target category -f category_template.csv","title":"category"},{"location":"usecases/usecases/","text":"","title":"Use cases"}]}